import numpy as np
import random

np.set_printoptions(formatter={'int':chr})
np.set_printoptions(formatter={'int':hex})

#################################################
# AES S-BOX

sbox = np.array([
    [0x63, 0x7c, 0x77, 0x7b, 0xf2, 0x6b, 0x6f, 0xc5, 0x30, 0x01, 0x67, 0x2b, 0xfe, 0xd7, 0xab, 0x76],
    [0xca, 0x82, 0xc9, 0x7d, 0xfa, 0x59, 0x47, 0xf0, 0xad, 0xd4, 0xa2, 0xaf, 0x9c, 0xa4, 0x72, 0xc0],
    [0xb7, 0xfd, 0x93, 0x26, 0x36, 0x3f, 0xf7, 0xcc, 0x34, 0xa5, 0xe5, 0xf1, 0x71, 0xd8, 0x31, 0x15],
    [0x04, 0xc7, 0x23, 0xc3, 0x18, 0x96, 0x05, 0x9a, 0x07, 0x12, 0x80, 0xe2, 0xeb, 0x27, 0xb2, 0x75],
    [0x09, 0x83, 0x2c, 0x1a, 0x1b, 0x6e, 0x5a, 0xa0, 0x52, 0x3b, 0xd6, 0xb3, 0x29, 0xe3, 0x2f, 0x84],
    [0x53, 0xd1, 0x00, 0xed, 0x20, 0xfc, 0xb1, 0x5b, 0x6a, 0xcb, 0xbe, 0x39, 0x4a, 0x4c, 0x58, 0xcf],
    [0xd0, 0xef, 0xaa, 0xfb, 0x43, 0x4d, 0x33, 0x85, 0x45, 0xf9, 0x02, 0x7f, 0x50, 0x3c, 0x9f, 0xa8],
    [0x51, 0xa3, 0x40, 0x8f, 0x92, 0x9d, 0x38, 0xf5, 0xbc, 0xb6, 0xda, 0x21, 0x10, 0xff, 0xf3, 0xd2],
    [0xcd, 0x0c, 0x13, 0xec, 0x5f, 0x97, 0x44, 0x17, 0xc4, 0xa7, 0x7e, 0x3d, 0x64, 0x5d, 0x19, 0x73],
    [0x60, 0x81, 0x4f, 0xdc, 0x22, 0x2a, 0x90, 0x88, 0x46, 0xee, 0xb8, 0x14, 0xde, 0x5e, 0x0b, 0xdb],
    [0xe0, 0x32, 0x3a, 0x0a, 0x49, 0x06, 0x24, 0x5c, 0xc2, 0xd3, 0xac, 0x62, 0x91, 0x95, 0xe4, 0x79],
    [0xe7, 0xc8, 0x37, 0x6d, 0x8d, 0xd5, 0x4e, 0xa9, 0x6c, 0x56, 0xf4, 0xea, 0x65, 0x7a, 0xae, 0x08],
    [0xba, 0x78, 0x25, 0x2e, 0x1c, 0xa6, 0xb4, 0xc6, 0xe8, 0xdd, 0x74, 0x1f, 0x4b, 0xbd, 0x8b, 0x8a],
    [0x70, 0x3e, 0xb5, 0x66, 0x48, 0x03, 0xf6, 0x0e, 0x61, 0x35, 0x57, 0xb9, 0x86, 0xc1, 0x1d, 0x9e],
    [0xe1, 0xf8, 0x98, 0x11, 0x69, 0xd9, 0x8e, 0x94, 0x9b, 0x1e, 0x87, 0xe9, 0xce, 0x55, 0x28, 0xdf],
    [0x8c, 0xa1, 0x89, 0x0d, 0xbf, 0xe6, 0x42, 0x68, 0x41, 0x99, 0x2d, 0x0f, 0xb0, 0x54, 0xbb, 0x16]
])

# AES INVERSE S-BOX
sbox_inv = np.array([
    [0x52, 0x09, 0x6a, 0xd5, 0x30, 0x36, 0xa5, 0x38, 0xbf, 0x40, 0xa3, 0x9e, 0x81, 0xf3, 0xd7, 0xfb],
    [0x7c, 0xe3, 0x39, 0x82, 0x9b, 0x2f, 0xff, 0x87, 0x34, 0x8e, 0x43, 0x44, 0xc4, 0xde, 0xe9, 0xcb],
    [0x54, 0x7b, 0x94, 0x32, 0xa6, 0xc2, 0x23, 0x3d, 0xee, 0x4c, 0x95, 0x0b, 0x42, 0xfa, 0xc3, 0x4e],
    [0x08, 0x2e, 0xa1, 0x66, 0x28, 0xd9, 0x24, 0xb2, 0x76, 0x5b, 0xa2, 0x49, 0x6d, 0x8b, 0xd1, 0x25],
    [0x72, 0xf8, 0xf6, 0x64, 0x86, 0x68, 0x98, 0x16, 0xd4, 0xa4, 0x5c, 0xcc, 0x5d, 0x65, 0xb6, 0x92],
    [0x6c, 0x70, 0x48, 0x50, 0xfd, 0xed, 0xb9, 0xda, 0x5e, 0x15, 0x46, 0x57, 0xa7, 0x8d, 0x9d, 0x84],
    [0x90, 0xd8, 0xab, 0x00, 0x8c, 0xbc, 0xd3, 0x0a, 0xf7, 0xe4, 0x58, 0x05, 0xb8, 0xb3, 0x45, 0x06],
    [0xd0, 0x2c, 0x1e, 0x8f, 0xca, 0x3f, 0x0f, 0x02, 0xc1, 0xaf, 0xbd, 0x03, 0x01, 0x13, 0x8a, 0x6b],
    [0x3a, 0x91, 0x11, 0x41, 0x4f, 0x67, 0xdc, 0xea, 0x97, 0xf2, 0xcf, 0xce, 0xf0, 0xb4, 0xe6, 0x73],
    [0x96, 0xac, 0x74, 0x22, 0xe7, 0xad, 0x35, 0x85, 0xe2, 0xf9, 0x37, 0xe8, 0x1c, 0x75, 0xdf, 0x6e],
    [0x47, 0xf1, 0x1a, 0x71, 0x1d, 0x29, 0xc5, 0x89, 0x6f, 0xb7, 0x62, 0x0e, 0xaa, 0x18, 0xbe, 0x1b],
    [0xfc, 0x56, 0x3e, 0x4b, 0xc6, 0xd2, 0x79, 0x20, 0x9a, 0xdb, 0xc0, 0xfe, 0x78, 0xcd, 0x5a, 0xf4],
    [0x1f, 0xdd, 0xa8, 0x33, 0x88, 0x07, 0xc7, 0x31, 0xb1, 0x12, 0x10, 0x59, 0x27, 0x80, 0xec, 0x5f],
    [0x60, 0x51, 0x7f, 0xa9, 0x19, 0xb5, 0x4a, 0x0d, 0x2d, 0xe5, 0x7a, 0x9f, 0x93, 0xc9, 0x9c, 0xef],
    [0xa0, 0xe0, 0x3b, 0x4d, 0xae, 0x2a, 0xf5, 0xb0, 0xc8, 0xeb, 0xbb, 0x3c, 0x83, 0x53, 0x99, 0x61],
    [0x17, 0x2b, 0x04, 0x7e, 0xba, 0x77, 0xd6, 0x26, 0xe1, 0x69, 0x14, 0x63, 0x55, 0x21, 0x0c, 0x7d]
])
#################################################
# GLOBAL VARIABLES

key = 0x000102030405060708090a0b0c0d0e0f
iv = 0x000102030405060708090a0b0c0d0e0f

key_bytes = np.array([0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f], dtype=np.ubyte)

key_matrix = np.array(key_bytes, dtype=np.ubyte).reshape(4, 4).T
key_schedule = np.zeros((4, 44), dtype=np.ubyte)

# iv_matrix = np.array(init_vector, dtype=np.ubyte).reshape(4, 4).T

#################################################

# DONE
def subbytes(state):
    res = np.zeros((4, 4), dtype=np.ubyte)

    for i in range(4):
        for j in range(4):

            row = state[i, j] >> 4
            col = state[i, j] & 0x0f
            res[i, j] = sbox[row, col]

    return res

def shift_rows(state):

    for i in range(1, 4):
        state[i] = np.roll(state[i], i*-1)

    return state

def gf_reduce(a):

    msb_pos = bin(a).__len__() - 3
    
    while(msb_pos >= 8):
        a = a ^ (0x11B << (msb_pos - 8))
        msb_pos = bin(a).__len__() - 3

    return a

def gf_mult(a, b):

    res = 0

    for i in range(8):
        if(b & (1 << i)):
            res ^= (a << i)

    return res

def gf_mod(a, b):

    res = gf_mult(a, b)
    res = gf_reduce(res)

    return res

def mix_columns(state):
    mult_matrix = np.array([
        [2, 3, 1, 1],
        [1, 2, 3, 1],
        [1, 1, 2, 3],
        [3, 1, 1, 2]
    ], dtype=np.ubyte)

    res = []

    for i in range(4):
        temp = []
        for j in range(4):
            s0 = 0
            for k in range(4):
                s0 ^= gf_mod(state[k, i], mult_matrix[j,k] )
            temp.append(s0)
        res.append(temp)
    
    res = np.matrix(res, dtype=np.ubyte).T

    return state

def key_expansion(key):

    global key_schedule

    #test array
    # test = np.array([
    #     [0x2b, 0x28, 0xab, 0x09],
    #     [0x7e, 0xae, 0xf7, 0xcf],
    #     [0x15, 0xd2, 0x15, 0x4f],
    #     [0x16, 0xa6, 0x88, 0x3c]
    # ], dtype=np.ubyte)
    # key = test

    rcon = np.array([
        [0x01, 0x00, 0x00, 0x00],
        [0x02, 0x00, 0x00, 0x00],
        [0x04, 0x00, 0x00, 0x00],
        [0x08, 0x00, 0x00, 0x00],
        [0x10, 0x00, 0x00, 0x00],
        [0x20, 0x00, 0x00, 0x00],
        [0x40, 0x00, 0x00, 0x00],
        [0x80, 0x00, 0x00, 0x00],
        [0x1b, 0x00, 0x00, 0x00],
        [0x36, 0x00, 0x00, 0x00]
    ], dtype=np.ubyte)

    key = key_matrix

    key_schedule = key_schedule.T
    for i in range(4):
        key_schedule[i] = key.T[i]

    for i in range(4, 44):
        aux = key_schedule[i-1]
        if(i % 4 == 0):
            aux = np.roll(aux, -1)
            for j in range(4):
                aux[j] = sbox[aux[j] >> 4, aux[j] & 0x0f]
            aux ^= rcon[i//4 -1]

        key_schedule[i] = key_schedule[i-4] ^ aux

    return key_schedule.T

def add_round_key(state, round):

    round_key = key_schedule.T[round*4 : round*4 + 4].T

    return state ^ round_key

def set_key(size = 128):

    global key_bytes
    global key
    global key_matrix

    key = random.randrange(2**( size-1) +1, 2**size)

    for i in range(16):
        key_bytes[i] = (key >> (8*(15-i))) & 0xff

    key_matrix = np.array(key_bytes, dtype=np.ubyte).reshape(4, 4).T


def aes_ctr(msg):

    set_key()

    # UNCOMMENT BELOW  TO SHOW GENERATED KEY
    # print('-----------------------------------')
    # print('key = ' + hex(key))
    # print(key_bytes)
    # print('-----------------------------------')

    while(len(msg) % 16 != 0):
        msg += chr(0)

    nk = 0
    if key_bytes.__len__() == 16:
        nk = 4
    elif key_bytes.__len__() == 24:
        nk = 6
    elif key_bytes.__len__() == 32:
        nk = 8
    
    aux = [ord(x) for x in msg]

    if(nk == 4):
        nr = 10
    elif(nk == 6):
        nr = 12
    elif(nk == 8):
        nr = 14
    
    blocks = np.zeros((len(msg)//16, 16), dtype=np.ubyte)

    for i in range(0, len(msg), 16):
        blocks[i//16] = aux[i:i+16]

    global key_schedule
    key_schedule = key_expansion(key_matrix)

    # nonce = np.array(init_vector[:8], dtype=np.ubyte)
    # counter = [0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0]

    # nonce = np.append(nonce, counter)
    # nonce = nonce.reshape(4,4).T

    # nonce = [0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0]
    # nonce = np.array(nonce, dtype=np.ubyte).reshape(4,4).T

    # state = add_round_key(nonce, 0)
    for i in range(len(blocks)):

        state = np.array(blocks[i], dtype=np.ubyte).reshape(4, 4).T

        state = add_round_key(state, 0)

        for j in range(nr):
            state = subbytes(state)
            state = shift_rows(state)
            
            if(j != nr-1):
                state = mix_columns(state)

            state = add_round_key(state, j+1)
        
        blocks[i] = state.T.reshape(16)
        # blocks[i] = state.reshape(16)

    return blocks

#################################################

# DECRIPT
 
def inv_shift_rows(state):

    for i in range(1, 4):
        state[i] = np.roll(state[i], i)

    return state

def inv_subbytes(state):
    
        for i in range(4):
            for j in range(4):
                state[i,j] = sbox_inv[state[i,j] >> 4, state[i,j] & 0x0f]
    
        return state

def inv_mix_columns(state):
    mult_matrix = np.array([
        [0x0e, 0x0b, 0x0d, 0x09],
        [0x09, 0x0e, 0x0b, 0x0d],
        [0x0d, 0x09, 0x0e, 0x0b],
        [0x0b, 0x0d, 0x09, 0x0e]
    ], dtype=np.ubyte)

    res = []

    for i in range(4):
        temp = []
        for j in range(4):
            s0 = 0
            for k in range(4):
                s0 ^= gf_mod(state[k, i], mult_matrix[j,k] )
            temp.append(s0)
        res.append(temp)
    
    res = np.matrix(res, dtype=np.ubyte).T

    return state

def aes_ctr_decrypt(msg, nk = 4):

    print("-------------------- DECRYPT --------------------")

    msg = [ord(x) for x in msg]

    if(nk == 4):
        nr = 10
    elif(nk == 6):
        nr = 12
    elif(nk == 8):
        nr = 14

    blocks = np.zeros((len(msg)//16, 16), dtype=np.ubyte)

    for i in range(0, len(msg), 16):
        blocks[i//16] = msg[i:i+16]

    global key_schedule
    key_schedule = key_expansion(key_matrix)

    for i in range(len(blocks)):

        state = np.array(blocks[i], dtype=np.ubyte).reshape(4, 4).T

        state = add_round_key(state, nr)

        for j in range(nr):
            state = inv_shift_rows(state)
            state = inv_subbytes(state)
            state = add_round_key(state, nr-j-1)

            if(j != nr-1):
                state = inv_mix_columns(state)
        
        blocks[i] = state.T.reshape(16)
        # blocks[i] = state.reshape(16)

    return blocks